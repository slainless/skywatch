import type { GlobalCity } from "@skywatch/city-list";
import type { QueryLocation, WeatherData } from "@skywatch/weather";
import { type AssertionGuard, createAssertGuard, createIs } from "typia";
export type WeathersQuery = Array<GlobalCity | QueryLocation>;
export const assertWeathersQuery: AssertionGuard<WeathersQuery> = (() => { const $guard = (createAssertGuard as any).guard; const $iv2 = new Set(["london", "new-york-city", "beijing", "dubai", "hong-kong", "paris", "shanghai", "singapore", "tokyo", "amsterdam", "brussels", "chicago", "frankfurt", "istanbul", "jakarta", "kuala-lumpur", "los-angeles", "luxembourg-city", "madrid", "mexico-city", "milan", "mumbai", "sao-paulo", "seoul", "sydney", "toronto", "warsaw"]); const $av4 = new Set(["london", "new-york-city", "beijing", "dubai", "hong-kong", "paris", "shanghai", "singapore", "tokyo", "amsterdam", "brussels", "chicago", "frankfurt", "istanbul", "jakarta", "kuala-lumpur", "los-angeles", "luxembourg-city", "madrid", "mexico-city", "milan", "mumbai", "sao-paulo", "seoul", "sydney", "toronto", "warsaw"]); const $io0 = (input: any): boolean => "number" === typeof input.latitude && "number" === typeof input.longitude && (undefined === input.altitude || "number" === typeof input.altitude); const $ao0 = (input: any, _path: string, _exceptionable: boolean = true): boolean => ("number" === typeof input.latitude || $guard(_exceptionable, {
    path: _path + ".latitude",
    expected: "number",
    value: input.latitude
}, _errorFactory)) && ("number" === typeof input.longitude || $guard(_exceptionable, {
    path: _path + ".longitude",
    expected: "number",
    value: input.longitude
}, _errorFactory)) && (undefined === input.altitude || "number" === typeof input.altitude || $guard(_exceptionable, {
    path: _path + ".altitude",
    expected: "(number | undefined)",
    value: input.altitude
}, _errorFactory)); const __is = (input: any): input is WeathersQuery => Array.isArray(input) && input.every((elem: any) => null !== elem && undefined !== elem && (true === $iv2.has(elem) || "object" === typeof elem && null !== elem && $io0(elem))); let _errorFactory: any; return (input: any, errorFactory?: (p: import("typia").TypeGuardError.IProps) => Error): asserts input is WeathersQuery => {
    if (false === __is(input)) {
        _errorFactory = errorFactory;
        ((input: any, _path: string, _exceptionable: boolean = true) => (Array.isArray(input) || $guard(true, {
            path: _path + "",
            expected: "WeathersQuery",
            value: input
        }, _errorFactory)) && input.every((elem: any, _index3: number) => (null !== elem || $guard(true, {
            path: _path + "[" + _index3 + "]",
            expected: "(\"amsterdam\" | \"beijing\" | \"brussels\" | \"chicago\" | \"dubai\" | \"frankfurt\" | \"hong-kong\" | \"istanbul\" | \"jakarta\" | \"kuala-lumpur\" | \"london\" | \"los-angeles\" | \"luxembourg-city\" | \"madrid\" | \"mexico-city\" | \"milan\" | \"mumbai\" | \"new-york-city\" | \"paris\" | \"sao-paulo\" | \"seoul\" | \"shanghai\" | \"singapore\" | \"sydney\" | \"tokyo\" | \"toronto\" | \"warsaw\" | Point3D)",
            value: elem
        }, _errorFactory)) && (undefined !== elem || $guard(true, {
            path: _path + "[" + _index3 + "]",
            expected: "(\"amsterdam\" | \"beijing\" | \"brussels\" | \"chicago\" | \"dubai\" | \"frankfurt\" | \"hong-kong\" | \"istanbul\" | \"jakarta\" | \"kuala-lumpur\" | \"london\" | \"los-angeles\" | \"luxembourg-city\" | \"madrid\" | \"mexico-city\" | \"milan\" | \"mumbai\" | \"new-york-city\" | \"paris\" | \"sao-paulo\" | \"seoul\" | \"shanghai\" | \"singapore\" | \"sydney\" | \"tokyo\" | \"toronto\" | \"warsaw\" | Point3D)",
            value: elem
        }, _errorFactory)) && (true === $av4.has(elem) || ("object" === typeof elem && null !== elem || $guard(true, {
            path: _path + "[" + _index3 + "]",
            expected: "(\"amsterdam\" | \"beijing\" | \"brussels\" | \"chicago\" | \"dubai\" | \"frankfurt\" | \"hong-kong\" | \"istanbul\" | \"jakarta\" | \"kuala-lumpur\" | \"london\" | \"los-angeles\" | \"luxembourg-city\" | \"madrid\" | \"mexico-city\" | \"milan\" | \"mumbai\" | \"new-york-city\" | \"paris\" | \"sao-paulo\" | \"seoul\" | \"shanghai\" | \"singapore\" | \"sydney\" | \"tokyo\" | \"toronto\" | \"warsaw\" | Point3D)",
            value: elem
        }, _errorFactory)) && $ao0(elem, _path + "[" + _index3 + "]", true) || $guard(true, {
            path: _path + "[" + _index3 + "]",
            expected: "(\"amsterdam\" | \"beijing\" | \"brussels\" | \"chicago\" | \"dubai\" | \"frankfurt\" | \"hong-kong\" | \"istanbul\" | \"jakarta\" | \"kuala-lumpur\" | \"london\" | \"los-angeles\" | \"luxembourg-city\" | \"madrid\" | \"mexico-city\" | \"milan\" | \"mumbai\" | \"new-york-city\" | \"paris\" | \"sao-paulo\" | \"seoul\" | \"shanghai\" | \"singapore\" | \"sydney\" | \"tokyo\" | \"toronto\" | \"warsaw\" | Point3D)",
            value: elem
        }, _errorFactory))) || $guard(true, {
            path: _path + "",
            expected: "WeathersQuery",
            value: input
        }, _errorFactory))(input, "$input", true);
    }
}; })();
export const isWeatherData = (() => { const $iv1 = new Set([0, 1, 2, 3, 45, 48, 51, 53, 55, 56, 57, 61, 63, 65, 66, 67, 71, 73, 75, 77, 80, 81, 82, 85, 86, 95, 96, 99]); const $iv11 = new Set([0, 1, 2, 3, 45, 48, 51, 53, 55, 56, 57, 61, 63, 65, 66, 67, 71, 73, 75, 77, 80, 81, 82, 85, 86, 95, 96, 99]); const $iv23 = new Set([0, 1, 2, 3, 45, 48, 51, 53, 55, 56, 57, 61, 63, 65, 66, 67, 71, 73, 75, 77, 80, 81, 82, 85, 86, 95, 96, 99]); const $io0 = (input: any): boolean => "object" === typeof input.current && null !== input.current && $io1(input.current) && ("object" === typeof input.hourly && null !== input.hourly && $io4(input.hourly)) && ("object" === typeof input.daily && null !== input.daily && $io7(input.daily)) && ("object" === typeof input.location && null !== input.location && $io10(input.location)) && "string" === typeof input.timezone && "string" === typeof input.timezoneAbbr && "number" === typeof input.receivedTimestamp && "number" === typeof input.sampleTimestamp && "number" === typeof input.sampleIntervalMs; const $io1 = (input: any): boolean => "object" === typeof input.units && null !== input.units && $io2(input.units) && ("object" === typeof input.data && null !== input.data && $io3(input.data)); const $io2 = (input: any): boolean => "string" === typeof input.time && "string" === typeof input.temperature && "string" === typeof input.relativeHumidity && "string" === typeof input.apparentTemperature && "string" === typeof input.precipitation && "string" === typeof input.rain && "string" === typeof input.showers && "string" === typeof input.snowfall && "string" === typeof input.weatherCode && "string" === typeof input.cloudCoverTotal && "string" === typeof input.windSpeed && "string" === typeof input.windDirection && "string" === typeof input.windGusts; const $io3 = (input: any): boolean => "current" === input.type && "string" === typeof input.time && "number" === typeof input.temperature && "number" === typeof input.relativeHumidity && "number" === typeof input.apparentTemperature && "number" === typeof input.precipitation && "number" === typeof input.rain && "number" === typeof input.showers && "number" === typeof input.snowfall && true === $iv1.has(input.weatherCode) && "number" === typeof input.cloudCoverTotal && "number" === typeof input.windSpeed && "number" === typeof input.windDirection && "number" === typeof input.windGusts; const $io4 = (input: any): boolean => "object" === typeof input.units && null !== input.units && $io5(input.units) && ("object" === typeof input.data && null !== input.data && $io6(input.data)); const $io5 = (input: any): boolean => "string" === typeof input.time && "string" === typeof input.temperature && "string" === typeof input.relativeHumidity && "string" === typeof input.apparentTemperature && "string" === typeof input.precipitation && "string" === typeof input.rain && "string" === typeof input.showers && "string" === typeof input.snowfall && "string" === typeof input.weatherCode && "string" === typeof input.cloudCoverTotal && "string" === typeof input.windSpeed && "string" === typeof input.windDirection && "string" === typeof input.windGusts && "string" === typeof input.cloudCoverLow && "string" === typeof input.cloudCoverMedium && "string" === typeof input.cloudCoverHigh && "string" === typeof input.precipitationProbability && "string" === typeof input.visibility; const $io6 = (input: any): boolean => "hourly" === input.type && (Array.isArray(input.time) && input.time.every((elem: any) => "string" === typeof elem)) && (Array.isArray(input.temperature) && input.temperature.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.relativeHumidity) && input.relativeHumidity.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.apparentTemperature) && input.apparentTemperature.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.precipitation) && input.precipitation.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.rain) && input.rain.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.showers) && input.showers.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.snowfall) && input.snowfall.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.weatherCode) && input.weatherCode.every((elem: any) => true === $iv11.has(elem))) && (Array.isArray(input.cloudCoverTotal) && input.cloudCoverTotal.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.windSpeed) && input.windSpeed.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.windDirection) && input.windDirection.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.windGusts) && input.windGusts.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.cloudCoverLow) && input.cloudCoverLow.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.cloudCoverMedium) && input.cloudCoverMedium.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.cloudCoverHigh) && input.cloudCoverHigh.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.precipitationProbability) && input.precipitationProbability.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.visibility) && input.visibility.every((elem: any) => "number" === typeof elem)); const $io7 = (input: any): boolean => "object" === typeof input.units && null !== input.units && $io8(input.units) && ("object" === typeof input.data && null !== input.data && $io9(input.data)); const $io8 = (input: any): boolean => "string" === typeof input.time && "string" === typeof input.weatherCode && "string" === typeof input.maxTemperature && "string" === typeof input.minTemperature && "string" === typeof input.maxApparentTemperature && "string" === typeof input.minApparentTemperature && "string" === typeof input.sunrise && "string" === typeof input.sunset && "string" === typeof input.precipitationSum && "string" === typeof input.rainSum && "string" === typeof input.showersSum && "string" === typeof input.snowfallSum && "string" === typeof input.precipitationHours && "string" === typeof input.precipitationProbabilityMax && "string" === typeof input.maximumWindSpeed && "string" === typeof input.maximumWindGusts && "string" === typeof input.dominantWindDirection; const $io9 = (input: any): boolean => "daily" === input.type && (Array.isArray(input.time) && input.time.every((elem: any) => "string" === typeof elem)) && (Array.isArray(input.weatherCode) && input.weatherCode.every((elem: any) => true === $iv23.has(elem))) && (Array.isArray(input.maxTemperature) && input.maxTemperature.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.minTemperature) && input.minTemperature.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.maxApparentTemperature) && input.maxApparentTemperature.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.minApparentTemperature) && input.minApparentTemperature.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.sunrise) && input.sunrise.every((elem: any) => "string" === typeof elem)) && (Array.isArray(input.sunset) && input.sunset.every((elem: any) => "string" === typeof elem)) && (Array.isArray(input.precipitationSum) && input.precipitationSum.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.rainSum) && input.rainSum.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.showersSum) && input.showersSum.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.snowfallSum) && input.snowfallSum.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.precipitationHours) && input.precipitationHours.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.precipitationProbabilityMax) && input.precipitationProbabilityMax.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.maximumWindSpeed) && input.maximumWindSpeed.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.maximumWindGusts) && input.maximumWindGusts.every((elem: any) => "number" === typeof elem)) && (Array.isArray(input.dominantWindDirection) && input.dominantWindDirection.every((elem: any) => "number" === typeof elem)); const $io10 = (input: any): boolean => "number" === typeof input.latitude && "number" === typeof input.longitude && (undefined === input.altitude || "number" === typeof input.altitude); return (input: any): input is Required<WeatherData> => "object" === typeof input && null !== input && $io0(input); })();
